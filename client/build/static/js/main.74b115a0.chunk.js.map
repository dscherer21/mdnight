{"version":3,"sources":["components/landingPage.js","App.js","serviceWorker.js","index.js"],"names":["LandingPage","props","setZipcode","zipcode","useEffect","axios","then","response","console","log","data","zipCode","catch","error","className","htmlFor","name","type","defaultValue","onChange","e","target","value","App","useState","icon","faBars","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wSAkEeA,MA/Df,SAAqBC,GAAQ,IACnBC,EAAwBD,EAAxBC,WAAYC,EAAYF,EAAZE,QAkCpB,OAhCAC,qBAAU,WACRC,IAAM,CACJ,OAAS,MACT,IAAM,sFACN,QAAU,CACR,eAAe,2BACf,kBAAkB,mEAClB,iBAAiB,qDACjB,gBAAiB,GAEnB,OAAS,CACP,OAAS,sCAGZC,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAASG,KAAKC,SAC1BT,EAAWK,EAASG,KAAKC,YAE1BC,OAAM,SAACC,GACNL,QAAQC,IAAII,QAEb,CAACX,IAOJE,qBAAU,WACRI,QAAQC,IAAIN,KACX,CAACA,IAGA,0BAAMW,UAAU,aACd,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,0CAAe,yCAAf,KACA,uFACA,wRAA2P,yCAA3P,gOAGJ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,2BAAOC,QAAQ,gBAAf,+CAGJ,yBAAKD,UAAU,OACb,yBAAKA,UAAU,OACb,2BAAOE,KAAK,eAAeC,KAAK,OAAOC,aAAcf,EAASgB,SAzBxE,SAA2BC,GAEzBlB,EAAWkB,EAAEC,OAAOC,YA0BhB,yBAAKR,UAAU,OACb,yBAAKA,UAAU,OACb,4BAAQA,UAAU,mBAAlB,oBCpBGS,MA/Bf,WAAgB,IAAD,EACgBC,mBAAS,IADzB,mBACPrB,EADO,KACED,EADF,KAGb,OACE,kBAAC,IAAD,KACE,yBAAKY,UAAU,OACb,4BAAQA,UAAU,aAChB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,gCACE,4BAAI,kBAAC,IAAD,CAAiBW,KAAMC,SAG/B,yBAAKZ,UAAU,OACb,0CAIN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOa,KAAK,KACV,kBAAC,EAAD,CAAaxB,QAASA,EAASD,WAAYA,MAG/C,4BAAQY,UAAU,aAChB,kDCpBUc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEd9B,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAM8B,c","file":"static/js/main.74b115a0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction LandingPage(props) {\r\n  const { setZipcode, zipcode } = props;\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      \"method\":\"GET\",\r\n      \"url\":\"https://find-any-ip-address-or-domain-location-world-wide.p.rapidapi.com/iplocation\",\r\n      \"headers\":{\r\n        \"content-type\":\"application/octet-stream\",\r\n        \"x-rapidapi-host\":\"find-any-ip-address-or-domain-location-world-wide.p.rapidapi.com\",\r\n        \"x-rapidapi-key\":\"de1d479e2fmsh29b0dda09cdd472p18faf0jsn2a1266abd3dc\",\r\n        \"useQueryString\":true\r\n      },\r\n      \"params\":{\r\n        \"apikey\":\"873dbe322aea47f89dcf729dcc8f60e8\"\r\n      }\r\n    })\r\n    .then((response)=>{\r\n      console.log(response.data.zipCode);\r\n      setZipcode(response.data.zipCode);\r\n    })\r\n    .catch((error)=>{\r\n      console.log(error)\r\n    });\r\n  }, [setZipcode]);\r\n\r\n  function handleInputChange(e) {\r\n    //sanitze inputs\r\n    setZipcode(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(zipcode);\r\n  }, [zipcode]);\r\n\r\n  return (\r\n      <main className='container'>\r\n        <div className='row'>\r\n          <div className='col'>\r\n            <h1>Welcome to <span>MDNight</span>!</h1>\r\n            <h2>The website that makes your date night more convenient.</h2>\r\n            <p>Let's assume that you and your \"Significant Other\" would like to go out for a date night, however, you have to continually switch back and forth between websites looking at showtimes and trying to find a place to eat beforehand. Well, that's where <span>MDNight</span> comes in! We take your location, movie you're interested in seeing, , and show you theaters that are showing your movie, and a list of restaurants nearby. Sound Convenient to you? Enter your info below to get started!</p>\r\n          </div>\r\n        </div>\r\n        <div className='row'>\r\n          <div className='col'>\r\n            <label htmlFor='zipcodeInput'>Please Enter Your zipcode to get started!</label>\r\n          </div>\r\n        </div>\r\n        <div className='row'>\r\n          <div className='col'>\r\n            <input name='zipcodeInput' type=\"text\" defaultValue={zipcode} onChange={handleInputChange} />\r\n          </div>\r\n        </div>\r\n        <div className='row'>\r\n          <div className='col'>\r\n            <button className='btn btn-primary'>Get Started!</button>\r\n          </div>\r\n        </div>\r\n      </main>\r\n  );\r\n}\r\n\r\nexport default LandingPage;","import React, { useState } from 'react';\nimport './App.scss';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport LandingPage from './components/landingPage';\n\nfunction App() {\n  const[zipcode, setZipcode] = useState('');\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className='container'>\n          <div className='row'>\n            <div className='col-1'>\n              <button>\n                <h1><FontAwesomeIcon icon={faBars} /></h1>\n              </button>\n            </div>\n            <div className='col'>\n              <h1>MDNight</h1>\n            </div>\n          </div>\n        </header>\n        <Switch>\n          <Route path='/'>\n            <LandingPage zipcode={zipcode} setZipcode={setZipcode} />\n          </Route>\n        </Switch>\n        <footer className='container'>\n          <h2>Copyright 2020</h2>\n        </footer>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}